#!/usr/bin/env bash

# *Stowaway-Dots* - a wrapper for [stow](https://www.gnu.org/software/stow/) designed for use with dotfiles in your 🏠 ($HOME).
#
# It adds interactivity: you can choose which packages to operate on. Selectively install, backup, and
# add dotfiles on a package by package basis. This means you can try dotfiles before committing to them, before or after forking a repo.
#
# It operates on the **package level** not the file level, meaning that any operation chosen for an individual
# file will apply to the entire package. (Stow defines a "package" as any directory in the source parameter)
# e.g. Selecting "backup" on "source_path/zsh/.zshrc" will backup (rename) the zsh directory to "target_path/zsh.backup"
#
# 🚨 Warning: selecting "all" for any of the options will remove the ability to work on packages one by one
#
# Why not just create the symlinks and remove stow? Because stow has some nice features for handling dotfiles, deletions, and tree folding/unfolding.
#
#	⚠️ Note: Why not pass all the parameters to one command since Stow can handle multiple packages at once?
# Because you won't be able to "add" (adopt) any *individual* packages into the repo, it becomes all or none.
#
# Dependencies:
#   stow
#   git
#
# Parameters:
#   String "-v" (optional): show verbose output
#   String src: source directory to search for dotfiles to operate on
#   String target_dir: target directory to search for existing dotfiles
#   e.g. stowaway-dots -v "~/.local/src/dotfiles" "~"
#
# Globals:
# (variables set by the function that are available after execution...kinda like a return)
#	$action - A single character with the user's selection
#
# Returns:
#   None
#

stowaway_check() {
	local src=$1
	local target_dir="$2"
	local overwrite="" backup="" skip="" install="" add=""
	local stowcmd=""
	local pkgname=""

	if ! which stow >/dev/null 2>&1; then
		fail "Skipping dotfiles setup because stow isn't installed."
	elif [ ! -e "$target_dir" ]; then
		fail "Target directory not found"
	fi

	log-message "DEBUG" "Starting stowaway_check for $src"
	log-message "DEBUG" "install_all=$([ "$install_all" == "true" ] && echo true || echo false) \
	overwrite_all=$([ "$overwrite_all" == "true" ] && echo true || echo false) \
	backup_all=$([ "$backup_all" == "true" ] && echo true || echo false) \
	skip_all=$([ "$skip_all" == "true" ] && echo true || echo false) \
	import_all=$([ "$add_all" == "true" ] && echo true || echo false)"

	pkgname="$(basename "$src")"

	if [ "$install_all" == "false" ] && [ "$overwrite_all" == "false" ] && [ "$backup_all" == "false" ] && [ "$skip_all" == "false" ] && [ "$add_all" == "false" ]; then
		local children
		local found=""
		local cfg_child_name=""

		# Get all children of the source directory one level deep
		log-message "DEBUG" "searching for children of $src"
		children=$(find "$src" -mindepth 1 -maxdepth 1)

		for child in $children; do
			# Skip processing children if anything in this package has been installed or skipped
			if [ "$skip" != "true" ] && [ "$install" != "true" ]; then # "false" or empty
				log-message "DEBUG" "processing children for ""$src"""
				# Get the base name of the child (remove the directory part)
				local child_name=""
				child_name=$(basename "$child")

				# Check for files in the package
				if [ -e "$target_dir/$pkgname/$child_name" ] && [ -f "$child" ]; then
					log-message "DEBUG" "Child Type File"
					found="$target_dir/$pkgname/$child_name"
				fi

				# only check the subdir that is .config
				if [ -d "$child" ] && [ "$child_name" = ".config" ]; then
					log-message "DEBUG" "Child Type .config Directory"
					local cfg_children="" cfg_child_name=""
					# Get all children one level deep
					cfg_children=$(find "$child" -mindepth 1 -maxdepth 1)
					for cfg_child in $cfg_children; do
						cfg_child_name=$(basename "$cfg_child")
						log-message "DEBUG" "checking for ""$target_dir"/.config/"$cfg_child_name"""
						if [ -e "$target_dir/.config/$cfg_child_name" ]; then
							found="$target_dir"/.config/"$cfg_child_name"
							log-message "DEBUG" "found existing dots $found"
						else
							log-message "DEBUG" "couldn't find existing dots"
						fi
					done
				fi

				# Get user input
				if [[ -n $found ]]; then
					# For debug
					if [ -n "$cfg_child_name" ]; then
						log-message "DEBUG" "Exists ${pkgname}/${child_name}/${cfg_child_name} in $found"
					else
						log-message "DEBUG" "Exists ${pkgname}/${child_name} in $found"
					fi
					# End debug
					local valid_options="sSoObBaA"
					while true; do
						printf "\r  [ \033[33m??\033[0m ] Found existing dots at $found, what do you want to do? [s]kip, [S]kip all, [o]verwrite, [O]verwrite all, [b]ackup, [B]ackup all, [a]dd, [A]dd all? "
						read -r -n 1 action # Read a single character from the user
						echo                # Move to a new line after reading input
						if [[ "$valid_options" == *"$action"* ]]; then
							log-message "DEBUG" "You chose: $action"
							break
						else
							log-message "WARNING" "Invalid option. Please choose either s, S, o, O, b, B, a or A." "true"
						fi
					done
				else
					# For debug
					if [ -n "$cfg_child_name" ]; then
						log-message "DEBUG" "No existing files at ${target_dir}/${child_name}/${cfg_child_name}"
					else
						log-message "DEBUG" "No existing files at ${target_dir}/$pkgname/${child_name}"
					fi
					# End debug
					local valid_options="iIsS"
					while true; do
						printf "\r  [ \033[33m??\033[0m ] Found $pkgname, what do you want to do: [i]nstall, [I]nstall all, [s]kip, [S]kip all? "
						read -r -n 1 action # Read a single character from the user
						echo                # Move to a new line after reading input
						if [[ "$valid_options" == *"$action"* ]]; then
							log-message "DEBUG" "You chose: $action"
							break
						else
							log-message "WARNING" "Invalid option. Please choose either i, I, s, or S." "true"
						fi
					done
				fi
			fi

			case "$action" in
			i) install=true ;;
			I) install_all=true ;;
			o) overwrite=true ;;
			O) overwrite_all=true ;;
			b) backup=true ;;
			B) backup_all=true ;;
			a) add=true ;;
			A) add_all=true ;;
			s) skip=true ;;
			S) skip_all=true ;;
			*) ;;
			esac
		done
	fi

	# if the individual action is unset, match the "all" action
	install=${install:-$install_all}
	overwrite=${overwrite:-$overwrite_all}
	backup=${backup:-$backup_all}
	add=${add:-$add_all}
	skip=${skip:-$skip_all}

	# delete the specified file to "overwrite"
	if [ "$overwrite" == "true" ]; then
		stowcmd="-R $pkgname -t $target_dir"
		stowcheck=("$pkgname" "restow")
		log-message "INFO" "Overwriting $found"
		log-message "WARNING" "When overwriting; files in $target_dir but NOT in the repo will still remain." "true"
	fi

	if [ "$backup" == "true" ]; then
		# back up the entire package
		local dst=""
		dst="${target_dir}"/"${pkgname}"
		log-message "DEBUG" "renamed $dst to ${dst}.backup"
		log-message "INFO" "Backing up $dst"
	fi

	# this will cause the whole package to be skipped if any of its children is skipped
	if [ "$skip" == "true" ]; then
		log-message "INFO" "Skipping $pkgname"
	fi

	# Stow the package
	if [ "$skip" != "true" ]; then
		stowcheck[0]="$pkgname"
		# add on the adopt flag if add or add_all
		if [ "$add" == "true" ]; then
			stowcmd="-S $pkgname --adopt"
			stowcheck[1]="adopt,"
		else
			stowcmd="-S $pkgname"
			stowcheck[1]="stow,"
		fi
		log-message "INFO" "Installing $pkgname"

		stowparams="$stowcmd -t $target_dir"
		log-message "DEBUG" "adding to stowparams: $stowparams"
	fi
}
stowaway_dots() {
	# function to install (stow) dotfiles
	local src=$1
	local target_dir="$2"
	local install_all=false overwrite_all=false backup_all=false skip_all=false add_all=false
	local stowparams=""
	local stowcheck=()
	local dirs=()

	log-message "DEBUG" "Searching for dots in $basedir"
	while IFS= read -r dir; do
		dirs+=("$dir")
	done < <(find "$src" -mindepth 1 -maxdepth 1 -type d ! -name '*.git*')

	for dir in "${dirs[@]}"; do
		stowaway_check "$dir" "$target_dir"
		log-message "DEBUG" "running command: stow $stowparams" "true"
		# "$ASME stow $stowparams"
		log-message "DEBUG" "Checking to see if ${stowcheck[0]} is installed" "$verbose_mode"
		if [ "${stowcheck[1]}" = "stow" ] && ! which "${stowcheck[0]}" >/dev/null 2>&1; then
			log-message "WARNING" "You chose to install dotfiles for the following packages, but they aren't on your system: ${stowcheck[0]}" "true"
		fi
	done

	log-message "SUCCESS" "dotfiles installed" "true"
}

# standalone mode
if test "$0" = "${BASH_SOURCE[0]}"; then
	# Initialize verbose mode to off
	verbose_mode=false
	if [ "$1" = "-v" ]; then
		verbose_mode=true
		shift
	fi
	stowaway_dots "$@"
fi
