#!/user/bin/env bash
# This script updates Jupyter Notebook's environment configuration by:
#
# 1. Sets the Jupyter config directory path (`~/.jupyter`)
# 2. Creates an empty dictionary to store Conda environment names and their paths
# 3. Loops through all Conda environments to:
#    - Get each environment name using `conda env list`
#    - Get the full path for each environment using `conda env info --full-path`
#    - Builds a dictionary mapping environment names to their paths
# 4. Uses `conda env list --json` and pipes to Python to:
#    - Read the full Conda JSON environment info
#    - Merge in the environment paths from the dictionary created above
#    - Add paths to each environment's package info
# 5. Saves the resulting JSON to `~/.jupyter/environments.json`
#
# The purpose is to ensure Jupyter knows about all available Conda environments
# and their correct paths, which is necessary for using different environments
# as Jupyter kernels.
#
# Note: The script assumes standard Conda installation and environment structure.

# Exit on error
set -e

JUPYTER_NOTEBOOK_config_dir=~/.jupyter

# Ensure config directory exists
mkdir -p "$JUPYTER_NOTEBOOK_config_dir"

# Initialize empty dictionary string
envs_dict=""

# Store conda env list output in a variable
conda_output=$(conda env list) || { echo "Failed to get conda environments"; exit 1; }

# Read the output line by line without a pipeline
while IFS= read -r line; do
    # Skip if line is empty or contains "envs" header
    [[ -z "$line" || "$line" =~ ^#.*$ ]] && continue

    # Split line into name and path, handling the * for active environments
    name=$(echo "$line" | awk '{print $1}')
    path=$(echo "$line" | awk '{$1=""; print $NF}' | sed 's/^[ *]*//') # Remove leading spaces and *

    # If name is empty or just *, extract it from the path
    if [[ -z "$name" || "$name" == "*" ]]; then
        # Get parent directory name from path
        name=$(basename "$(dirname "$path")")
    fi

    # Append to dictionary string
    envs_dict="${envs_dict} \"${name}\":\"${path}\""
done <<< "$conda_output"

# Create the final JSON object by combining the existing JSON with the new environment paths
conda env list --json | python -c "
import sys, json

try:
    # Load the conda environments JSON
    kls = json.load(sys.stdin)
    # Load our environment dictionary
    envs = json.loads('{' + '${envs_dict# }' + '}')

    # Initialize the namespaces and packages structures if they don't exist
    if 'namespaces' not in kls:
        kls['namespaces'] = {}
    if 'packages' not in kls['namespaces']:
        kls['namespaces']['packages'] = {}

    # Add or update each environment
    for k in envs:
        if k not in kls['namespaces']['packages']:
            kls['namespaces']['packages'][k] = []
        if envs[k] not in kls['namespaces']['packages'][k]:
            kls['namespaces']['packages'][k].append(envs[k])

    # Output the updated JSON
    print(json.dumps(kls, indent=2))
except json.JSONDecodeError as e:
    print('Error parsing JSON:', e, file=sys.stderr)
    sys.exit(1)
except Exception as e:
    print('Unexpected error:', e, file=sys.stderr)
    sys.exit(1)
" > "$JUPYTER_NOTEBOOK_config_dir/environments.json" || { echo "Failed to update environments.json"; exit 1; }

echo "Successfully updated Jupyter environments configuration"
