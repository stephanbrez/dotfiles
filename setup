#!/bin/bash

#  ██▓ ███▄    █   ██████ ▄▄▄█████▓ ▄▄▄       ██▓     ██▓    ▓█████  ██▀███
# ▓██▒ ██ ▀█   █ ▒██    ▒ ▓  ██▒ ▓▒▒████▄    ▓██▒    ▓██▒    ▓█   ▀ ▓██ ▒ ██▒
# ▒██▒▓██  ▀█ ██▒░ ▓██▄   ▒ ▓██░ ▒░▒██  ▀█▄  ▒██░    ▒██░    ▒███   ▓██ ░▄█ ▒
# ░██░▓██▒  ▐▌██▒  ▒   ██▒░ ▓██▓ ░ ░██▄▄▄▄██ ▒██░    ▒██░    ▒▓█  ▄ ▒██▀▀█▄
# ░██░▒██░   ▓██░▒██████▒▒  ▒██▒ ░  ▓█   ▓██▒░██████▒░██████▒░▒████▒░██▓ ▒██▒
# ░▓  ░ ▒░   ▒ ▒ ▒ ▒▓▒ ▒ ░  ▒ ░░    ▒▒   ▓▒█░░ ▒░▓  ░░ ▒░▓  ░░░ ▒░ ░░ ▒▓ ░▒▓░
#  ▒ ░░ ░░   ░ ▒░░ ░▒  ░ ░    ░      ▒   ▒▒ ░░ ░ ▒  ░░ ░ ▒  ░ ░ ░  ░  ░▒ ░ ▒░
#  ▒ ░   ░   ░ ░ ░  ░  ░    ░        ░   ▒     ░ ░     ░ ░      ░     ░░   ░
#  ░           ░       ░                 ░  ░    ░  ░    ░  ░   ░  ░   ░

# TODO:
#
# ╔════════════════════════════════════════════════╗
# ║  ░█▄█░█▀▀░▀█▀░█░█░█▀█░█▀▄░█▀█░█░░░█▀█░█▀▀░█░█  ║
# ║  ░█░█░█▀▀░░█░░█▀█░█░█░█░█░█░█░█░░░█░█░█░█░░█░  ║
# ║  ░▀░▀░▀▀▀░░▀░░▀░▀░▀▀▀░▀▀░░▀▀▀░▀▀▀░▀▀▀░▀▀▀░░▀░  ║
# ╚════════════════════════════════════════════════╝
# Automate the installation of dotfiles and tools
# Distro independent
# Also works for Mac
#

#########################################
# Script setup                          #
#########################################
myhome=$(dirname "$(readlink -f "$0")")
me=$(basename "$myhome")
basedir="$myhome/.dotfiles"
bindir="$myhome/.local/bin"
repourl="https://github.com/stephanbrez/dotfiles.git"
arch="amd64"
ASME="sudo -u $me"
# ======== end user options ======== #

# Initialize verbose mode to off
verbose_mode=false

# Parse command-line arguments
while getopts "v" option; do
	case $option in
	v) verbose_mode=true ;;
	*)
		echo "Usage: $0 [-v]"
		exit 1
		;;
	esac
done
echo "Verbose mode is $verbose_mode"

# ======== helper functions ======== #
function _echo() { printf "\n╓───── %s \n╙────────────────────────────────────── ─ ─ \n" "$1"; }
function user() { printf "\r  [ \033[33m??\033[0m ] %s" "$1"; }
function fail() {
	printf "\r\033[2K  [ \033[01;31mFAIL\033[0m ] %s\n" "$1"
	echo ''
	exit
}

log_message() {
	# Function to format and print messages based on the type with optional override to force display (ignore verbose)
	# Usage: log_message "str:MSGTYPE" "str:Message" "boolean:force display"
	local message_type=$1
	local message=$2
	local force=${3:-false}
	local timestamp
	timestamp=$(date +"%Y-%m-%d %H:%M:%S")

	if $verbose_mode || $force; then
		case $message_type in
		DEBUG) printf "  [ \033[36mDebug\033[0m ][%s] %s\n" "$timestamp" "$message" ;;
		INFO) printf "[ \033[34m>>\033[0m ] %s\n" "$message" ;;
		WARNING) printf "[\033[31m;1 !!! \033[0m][%s] %s\n" "$timestamp" "$message" ;;
		SUCCESS) printf "\033[2K  [ \033[32mOK\033[0m ] %s\n" "$message" ;;
		*) printf "[UNKNOWN][%s] %s\n" "$timestamp" "$message" ;; # Fallback for unknown message types
		esac
	fi
}

function linux_package() {
	if [ -x "$(command -v apk)" ]; then
		pkgmgr="apk"
		pkginstall="add --no-cache"
		pkgupdate="update"
	elif [ -x "$(command -v apt)" ]; then
		pkgmgr="apt"
		pkginstall="install -y"
		pkgupdate="update"
	elif [ -x "$(command -v dnf)" ]; then
		pkgmgr="dnf"
		pkginstall="install -y"
		pkgupdate="update"
	elif [ -x "$(command -v pacman)" ]; then
		pkgmgr="pacman"
		pkginstall="-S"
		pkgupdate="-Syu"
	elif [ -x "$(command -v zypper)" ]; then
		pkgmgr="zypper"
		pkginstall="install"
		pkgupdate="refresh && zypper update"
	else
		fail "Package manager not found. You must manually install packages."
	fi
}
# for avoiding eval some day
# pkgcommands[0] = "$pkgmgr $pkginstall"
# pkgcommands[1] = "$pkgmgr $pkgupdate"

# ======== sanity check ======== #
log_message "INFO" "setting up dotfiles for '$me' in '$basedir'" "true"
while true; do
	user "Do you want to continue? (y/n): "
	read -r -n1 yn
	echo # Move to a new line after reading input
	case $yn in
	y | Y)
		log_message "INFO" "Continuing..." "true"
		break
		;;
	n | N) fail "Exiting." ;;
	*) log_message "WARNING" "Invalid response. Please enter 'y' or 'n'." "true" ;;
	esac
done

_echo "creating directories"
$ASME mkdir -p \
	"$myhome"/.{config,local} \
	"$myhome"/.local/{bin,cache,lib,share,src,state}
$ASME ln -s "$myhome"/Documents "$myhome"/.local/docs

#########################################
# Install Packages                      #
#########################################
function install_packages() {
	_echo "configuring package manager"
	distro=$(lsb_release -c | awk '{print $2}')
	case "$OSTYPE" in
	darwin*)
		pkgmgr="brew"
		pkginstall="install"
		pkgupdate="update"
		DARWIN=1
		;;
	linux*)
		LINUX=1
		linux_package
		;;
	bsd*)
		OS=$(uname -s)
		VER=$(uname -r)
		;;
	msys*)
		echo "WINDOWS"
		;;
	cygwin*)
		echo "ALSO WINDOWS"
		;;
	win32*)
		echo "WINDOWS"
		;;
	*)
		fail "unknown: $OSTYPE"
		;;
	esac

	_echo "updating package manager"
	"$pkgmgr" "$pkgupdate"

	# install all the things \o/
	_echo "installing packages"
	# build package list
	pkgInstall=(
		# command line tools
		bat
		btop
		diffutils
		doxygen
		fd-find
		findutils
		gawk
		gh
		git
		luarocks
		mawk
		mc
		# neovim - Debian version is too old
		ripgrep
		shellcheck
		silversearcher-ag
		stow
		thefuck
		tldr
		tmux
		trash-cli
		zsh
		# system/server tools
		automake
		bash
		bash-completion
		build-essential
		ca-certificates
		cmake
		coreutils
		curl
		docker.io
		e2fsprogs
		ethtool
		exfatprogs
		flatpak
		gcc
		gettext
		golang
		golang-doc
		golang-src
		gpg
		meson
		ninja-build
		npm
		pipx
		pkgconf
		python3
		# python3-neovim - Debian will force old neovim install
		python3-pip
		python3-venv
		secure-delete
		unzip
		util-linux
		wget
		wl-clipboard
		# fun
		toilet
	)
	case $pkgmgr in
	apt*)
		# Debian specific stuff
		eval "$pkgmgr $pkginstall apt-utils dash debianutils dpkg python3-dev exfat-fuse ttf-dejavu"
		;;
	dnf*)
		# Fedora specific stuff
		eval "$pkgmgr $pkginstall dejavu-fonts fuse-exfat python3-devel python3-neovim neovim"
		;;
	esac
	eval "$pkgmgr $pkginstall ${pkgInstall[*]}"

	# manually add apt sources
	mkdir -p /etc/apt/keyrings
	# add flatpak repo
	flatpak remote-add --if-not-exists flathub https://dl.flathub.org/repo/flathub.flatpakrepo

	# ======== install 1password ======== #
	_echo "installing 1password"
	curl -sS https://downloads.1password.com/linux/keys/1password.asc | gpg --dearmor --output /usr/share/keyrings/1password-archive-keyring.gpg &&
		echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/1password-archive-keyring.gpg] https://downloads.1password.com/linux/debian/$(dpkg --print-architecture) stable main" | tee /etc/apt/sources.list.d/1password.list
	mkdir -p /etc/debsig/policies/AC2D62742012EA22/ &&
		curl -sS https://downloads.1password.com/linux/debian/debsig/1password.pol | tee /etc/debsig/policies/AC2D62742012EA22/1password.pol
	mkdir -p /usr/share/debsig/keyrings/AC2D62742012EA22 &&
		curl -sS https://downloads.1password.com/linux/keys/1password.asc | gpg --dearmor --output /usr/share/debsig/keyrings/AC2D62742012EA22/debsig.gpg
	apt update && apt install -y 1password 1password-cli

	# ======== install eza ======== #
	_echo "installing eza"
	wget -qO- https://raw.githubusercontent.com/eza-community/eza/main/deb.asc | gpg --dearmor -o /etc/apt/keyrings/gierens.gpg
	echo "deb [signed-by=/etc/apt/keyrings/gierens.gpg] http://deb.gierens.de stable main" | tee /etc/apt/sources.list.d/gierens.list
	chmod 644 /etc/apt/keyrings/gierens.gpg /etc/apt/sources.list.d/gierens.list
	apt update && apt install -y eza

	# ======== install fastfetch ======== #
	_echo "installing fastfetch"
	curl -Lo fastfetch-linux.deb "https://github.com/fastfetch-cli/fastfetch/releases/latest/download/fastfetch-linux-$(dpkg --print-architecture).deb" &&
		dpkg -i fastfetch-linux.deb &&
		rm -rf fastfetch-linux.deb

	# ======== install fzf ======== #
	_echo "installing fzf"
	$ASME git clone --depth 1 https://github.com/junegunn/fzf.git "$myhome"/.fzf &&
		$ASME "$myhome"/.fzf/install

	# ======== install glow ======== #
	_echo "installing glow"
	curl -fsSL https://repo.charm.sh/apt/gpg.key | sudo gpg --dearmor -o /etc/apt/keyrings/charm.gpg
	echo "deb [signed-by=/etc/apt/keyrings/charm.gpg] https://repo.charm.sh/apt/ * *" | tee /etc/apt/sources.list.d/charm.list
	apt update && apt install glow

	# ======== install lazygit ======== #
	_echo "installing lazygit"
	LAZYGIT_VERSION=$(curl -s "https://api.github.com/repos/jesseduffield/lazygit/releases/latest" | grep -Po '"tag_name": "v\K[^"]*')
	curl -Lo lazygit.tar.gz "https://github.com/jesseduffield/lazygit/releases/latest/download/lazygit_${LAZYGIT_VERSION}_Linux_x86_64.tar.gz"
	tar xf lazygit.tar.gz lazygit
	install lazygit /usr/local/bin
	rm -rf lazygit.tar.gz
	rm -rf lazygit

	# ======== install neovim ======== #
	_echo "building neovim"
	# build from source because debian is old
	$ASME git clone https://github.com/neovim/neovim "$myhome"/.local/src/neovim &&
		cd "$myhome"/.local/src/neovim &&
		git checkout stable &&
		make CMAKE_BUILD_TYPE=RelWithDebInfo &&
		cd build &&
		cpack -G DEB &&
		dpkg -i nvim-linux64.deb

	# ======== install openvpn ======== #
	_echo "installing openvpn"
	curl -sSfL https://packages.openvpn.net/packages-repo.gpg | tee /etc/apt/keyrings/openvpn.asc
	echo "deb [signed-by=/etc/apt/keyrings/openvpn.asc] https://packages.openvpn.net/openvpn3/debian $distro main" | tee /etc/apt/sources.list.d/openvpn3.list
	apt update && apt install -y openvpn3

	# ======== install wezterm ======== #
	_echo "installing wezterm"
	curl -fsSL https://apt.fury.io/wez/gpg.key | gpg --yes --dearmor -o /usr/share/keyrings/wezterm-fury.gpg
	echo 'deb [signed-by=/usr/share/keyrings/wezterm-fury.gpg] https://apt.fury.io/wez/ * *' | tee /etc/apt/sources.list.d/wezterm.list
	apt update && apt install wezterm

	# ======== install zoxide ======== #
	# debian only
	_echo "installing zoxide"
	$ASME curl -sS https://raw.githubusercontent.com/ajeetdsouza/zoxide/main/install.sh | $ASME bash

	# ======== install extra python apps ======== #
	_echo "setting up python + pip"
	$ASME pipx ensurepath    # add bin path to bash - aka $bindir
	pipx ensurepath --global # optional to allow pipx actions with --global argument
	$ASME pipx install docutils
	$ASME pipx install emoji-fzf
	# install python neovim after neovim because debian will install old neovim
	eval "$pkgmgr $pkginstall python3-neovim"

	# ======== Fun stuff ======== #
	_echo "setting up ascii/ansi art tools"
	rm -rf /usr/share/figlet/
	git clone --depth=1 https://github.com/xero/figlet-fonts.git /usr/share/figlet/
	$ASME git clone --depth=1 https://github.com/digitallyserviced/tdfgo.git "$myhome"/.local/src/tdfgo &&
		cd "$myhome"/.local/src/tdfgo &&
		$ASME go build &&
		mv ./tdfgo "$myhome"/.local/bin/tdfgo &&
		chmod +x "$myhome"/.local/bin/tdfgo &&
		mkdir -p "$myhome"/.config/tdfgo &&
		mv ./fonts "$myhome"/.config/tdfgo/fonts
}

while true; do
	user "Do you want to install packages? (y/n): "
	read -r -n1 yn
	echo # Move to a new line after reading input
	case $yn in
	[Yy]*)
		log_message "INFO" "Continuing with package install..." "true"
		install_packages
		break
		;;
	[Nn]*)
		log_message "INFO" "Skipping package install." "true"
		break
		;;
	*) log_message "WARNING" "Invalid response. Please enter 'y' or 'n'." "true" ;;
	esac
done

#########################################
# Setup                                 #
#########################################

# ======== setup dotfiles ======== #
_echo "setting up dotfiles"
if [ -d "$basedir/.git" ]; then
	log_message "INFO" "Updating dotfiles using existing git..."
	cd "$basedir" &&
		$ASME git pull --quiet --rebase origin main || exit 1 # no use continuing if git pull fails
	stowaway-dots "$basedir" "$myhome"
else
	log_message "INFO" "Checking out dotfiles using git..."
	rm -rf "$basedir"
	$ASME git clone --quiet "$repourl" "$basedir" &&
		cd "$basedir" &&
		stowaway-dots "$basedir" "$myhome"
fi

# ======== setup fd ======== #
# debian only
ln -s "$(which fdfind)" "$bindir"/fd

# ======== setup git ======== #
# Git config name
echo "Please enter your FULL NAME for Git configuration:"
read -r git_user_name

# Git config email
echo "Please enter your EMAIL for Git configuration:"
read -r git_user_email

# Set git credentials
git config --global user.name "$git_user_name"
git config --global user.email "$git_user_email"
log_message "SUCCESS" "gitconfig"

# ======== setup tmux ======== #
_echo "setting up tmux"
if which tmux >/dev/null 2>&1; then
	tpm="$myhome/.tmux/plugins/tpm"
	$ASME mkdir -p "$tpm"
	if [ -e "$myhome/.config/tmux/plugins/tpm" ]; then
		mv "$myhome/.config/tmux/plugins/tpm" "$tpm"
		pushd "$tpm" >/dev/null &&
			$ASME git pull -q origin master &&
			popd >/dev/null || return
	else
		$ASME git clone --depth=1 https://github.com/tmux-plugins/tpm "$tpm" &&
			$ASME "$tpm"/scripts/install_plugins.sh >/dev/null &&
			$ASME "$tpm"/scripts/clean_plugins.sh >/dev/null &&
			$ASME "$tpm"/scripts/update_plugin.sh >/dev/null
	fi
else
	fail "Skipping tmux setup because tmux isn't installed."
fi

# ======== zsh ======== #
_echo "setting up zsh"
if which zsh >/dev/null 2>&1; then
	$ASME chsh -s "$(which zsh)"
fi

#########################################
# Manual Install                        #
#########################################
